** This testcase demonstrates correctness of module structure with declaration and simple statements**
<<<driver program>>>
start
	declare v_1_2_3, a, b, gf, e, g:integer;
	get_value(v_1_2_3);
	declare result_:integer;
	print(result);
    declare var_1_, var_2_, var_3_:integer;
	declare R1_abc: boolean;
	declare r2_ABC: integer;
	declare R3_abc: real;
	get_value(var_1_);

    switch(t)
		start
			case true: print(list[index]);
				   break;
			case false: print(sum);
				    print(index);
				    **prints the values of sum and index  15-n times**
				    break;
		end
end

<<module square>>
takes input [x:integer];
returns [value:integer];
start
end

**notice that this test case does not declare the module before the driver module, still it is syntactically correct as moduleDeclarations is optional. Testing whether a module is declared before its use is a matter of semantic analysis**

** test the correctness of all lexemes and parse tree created
and print the following message on successful compilation on the console
      " Input source code is syntactically correct.........."
**

**make sure to produce only relevant output of your compiler code...
Also remove all unnecessary printf statements and make the code more professional before submitting**
