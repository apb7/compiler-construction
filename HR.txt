<program> -> <moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations> -> <moduleDeclaration> <moduleDeclarations> | ε
<moduleDeclaration> -> DECLARE MODULE ID SEMICOL
<otherModules> -> <module> <otherModules> | ε
<driverModule> -> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> -> DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> -> RETURNS SQBO <output_plist> SQBC SEMICOL | ε

<input_plist> -> <input_plist> COMMA ID COLON <dataType> | ID COLON <dataType>
<output_plist> -> <output_plist> COMMA ID COLON <type> | ID COLON <type>

<dataType> -> INTEGER | REAL | BOOLEAN | ARRAY SQBO <range_arrays> SQBC OF <type>
<range_arrays> -> <index> RANGEOP <index>

<type> -> INTEGER | REAL | BOOLEAN

<moduleDef> -> START <statements> END

<statements> -> <statement> <statements> | ε

<statement> -> <ioStmt> | <simpleStmt> | <declareStmt> | <condionalStmt> | <iterativeStmt>

<ioStmt> -> GET_VALUE BO ID BC SEMICOL | PRINT BO <var> BC SEMICOL

<boolConstt> ->TRUE | FALSE
<var_id_num> -> ID <whichId> | NUM | RNUM
<var> -> <var_id_num> | <boolConstt>

<whichId> -> SQBO <index> SQBC | ε

<simpleStmt> -> <assignmentStmt> | <moduleReuseStmt>

<assignmentStmt> -> ID <whichStmt>

<whichStmt> -> <lvalueIDStmt> | <lvalueARRStmt>

<lvalueIDStmt> -> ASSIGNOP <expression> SEMICOL

<lvalueARRStmt> -> SQBO <index> SQBC ASSIGNOP <expression> SEMICOL

<index> -> NUM | ID

<moduleReuseStmt> -> <optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL

<optional> -> SQBO <idList> SQBC ASSIGNOP | ε

<idList> -> <idList> COMMA ID | ID

<expression> -> <arithmeticOrBooleanExpr> | <U>
<U> -> <unary_op> <new_NT>
<new_NT> -> BO <arithmeticExpr> BC | <var_id_num>
<unary_op> -> PLUS | MINUS

<arithmeticOrBooleanExpr> -> <arithmeticOrBooleanExpr> <logicalOp> <AnyTerm> | <AnyTerm>
<AnyTerm> -> <AnyTerm> <relationalOp> <arithmeticExpr> | <arithmeticExpr> | <boolConstt>

<arithmeticExpr> -> <arithmeticExpr> <op1> <term>
<arithmeticExpr> -> <term>

<term> -> <term> <op2> <factor>
<factor> ->BO <arithmeticExpr> BC | <var_id_num>
 

<op1> -> PLUS | MINUS
<op2> -> MUL | DIV

<logicalOp> -> AND | OR
<relationalOp> -> LT | LE | GT | GE | EQ | NE

<declareStmt> -> DECLARE <idList> COLON <dataType> SEMICOL

<condionalStmt> -> SWITCH BO ID BC START <caseStmts> <default> END

<caseStmts> -> CASE <value> COLON <statements> BREAK SEMICOL <N9>
<N9> -> CASE <value> COLON <statements> BREAK SEMICOL <N9> | ε

<value> -> NUM | TRUE | FALSE

<default> -> DEFAULT COLON <statements> BREAK SEMICOL | ε

<iterativeStmt> -> FOR BO ID IN <range> BC START <statements> END | WHILE BO <arithmeticOrBooleanExpr> BC START <statements> END

<range> -> NUM RANGEOP NUM
